package hope.unionFind;

import java.util.Arrays;

/**
 * @author Mr.Du
 * @ClassName Code09_MinimizeMalwareSpreadII
 * @date 2023年11月14日 11:12
 */
// 尽量减少恶意软件的传播 II
// 给定一个由 n 个节点组成的网络，用 n x n 个邻接矩阵 graph 表示
// 在节点网络中，只有当 graph[i][j] = 1 时，节点 i 能够直接连接到另一个节点 j。
// 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，
// 且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。
// 这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
// 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
// 我们可以从 initial 中删除一个节点，
// 并完全移除该节点以及从该节点到任何其他节点的任何连接。
// 请返回移除后能够使 M(initial) 最小化的节点。
// 如果有多个节点满足条件，返回索引 最小的节点 。
// initial 中每个整数都不同
// 测试链接 : https://leetcode.cn/problems/minimize-malware-spread-ii/
public class Code09_MinimizeMalwareSpreadII {
    // 先把普通的点合并到一个个的集合里
    // 然后依次看每一个感染点相邻的集合，把集合的头设置成当前感染点，如果一个集合有多个感染点，则无效
    // 如果测试数据变大，就改变这个值
    public static int MAXN = 301;
    public static boolean[] virus = new boolean[MAXN];
    // 每个源头点删掉的话，能拯救多少点的数据
    public static int[] cnts = new int[MAXN];
    // 集合的标签 : 集合的感染点是什么点
    // a : 代表点，整个集合源头是 infect[a]
    // infect[a] == -1，目前这个集合没有发现源头
    // infect[a] >= 0，目前这个集合源头是 infect[a]
    // infect[a] == -2，目前这个集合源头不止一个，已经无法拯救了!
    public static int[] infect = new int[MAXN];
    // 并查集固有信息
    public static int[] father = new int[MAXN];

    // 集合的标签 : 集合的大小是多少
    public static int[] size = new int[MAXN];

    public static void build(int n, int[] arr) {
        for (int i = 0; i < n; i++) {
            virus[i] = false;
            cnts[i] = 0;
            size[i] = 1;
            infect[i] = -1;
            father[i] = i;
        }
        // 感染点
        for (int i : arr) {
            virus[i] = true;
        }
    }

    public static int find(int x) {
        if (x != father[x]) {
            father[x] = find(father[x]);
        }
        return father[x];
    }

    public static void union(int x, int y) {
        int fx = find(x);
        int fy = find(y);
        if (fx == fy) {
            return;
        }
        father[fx] = fy;
        size[fy] += size[fx];
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        build(n, initial);
        // 普通的点合并
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1 && !virus[i] && !virus[j]) {
                    union(i, j);
                }
            }
        }
        // 感染点周围普通的几何设置代表节点
        for (int i : initial) {
            for (int j = 0; j < n; j++) {
                // 感染点周围的点，不是感染点，且有路
                if (i != j && !virus[j] && graph[i][j] == 1) {
                    int fj = find(j);
                    if (infect[fj] == -1) {
                        infect[fj] = i;
                    }
                    // 如果周围的点已经是-2，并且还不是当前的感染点为代表节点
                    else if (infect[fj] != -2 && infect[fj] != i) {
                        infect[fj] = -2;
                    }
                }
            }
        }
        // 统计每个有效集合内有多少个节点
        for (int i = 0; i < n; i++) {
            if (i == find(i) && infect[i] >= 0) {
                cnts[infect[i]] += size[i];
            }
        }
        Arrays.sort(initial);
        int ans = initial[0];
        int max = cnts[ans];
        for (int i : initial) {
            if (cnts[i] > max) {
                ans = i;
                max = cnts[i];
            }
        }
        return ans;
    }
}
