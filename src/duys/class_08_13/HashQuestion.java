package duys.class_08_13;

/**
 * @ClassName HashQuestion
 * @Author Duys
 * @Description hash问题
 * @Date 2021/8/16 16:47
 **/
public class HashQuestion {
    /**
     * hash
     *  离散性，均匀性
     * - 输入无穷大
     * - 输出相对有限
     * hash碰撞的根本
     *
     * 2.保证均匀分布
     */

    /**
     * 布隆过滤器：bitMap-位图
     * 1.如果存在的话，一定不会找不到，如果不存在过滤器里面，可能会存在失误率的情况
     * 实例：100亿数据 18G内存，10万分之6的失误率
     * m-内存大小
     * p-失误率
     * k-多少个哈希函数
     */
    /**
     * 一致性哈希：动态的扩展或者减少
     * 哈希环：把机器加入环中，然后数据不存在模运算的说法，hash值算出来后，在哈希环上，归属于顺时针遇到的第一台机器
     * 数据迁移：
     * 那么加机器：只需要从顺时针找到下一台，把从上一台结束位置到新加入的位置的数据从下一台服务迁移到要加入的机器上
     * 那么减少机器：只要把要减少的机器上的数据全部加入到下一台机器上去就可以了
     *
     *
     * 虚拟节点方法：既能实现负载均衡，也能实现负载管理
     * 怎么保证机器在环内是均分的，包括初始阶段和增加减少机器阶段：虚拟节点方法搞定
     *  解答：预先给每一台机器预分配同等数量的虚拟节点，让每一台机器的虚拟节点去环上抢位置，那么虚拟节点实际占的位置，
     *  那么虚拟节点占的位置就属于对应的机器
     *  新增机器的时候，也是一样，以同样的虚拟节点向之前的机器均分的拿到节点。然后进行数据迁移
     *
     */

    /**
     *
     */
}
