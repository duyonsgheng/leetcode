package week.week_2022_11_04;

/**
 * @ClassName Code_05_PickBestToGetInValue
 * @Author Duys
 * @Description
 * @Date 2022/11/24 17:35
 **/
// 来自第四届全国大学生算法设计与编程挑战赛（秋季赛）
// 给定两个长度为N的数组，a[]和b[]
// 也就是对于每个位置i来说，有a[i]和b[i]两个属性
// 现在想为了i，选一个最好的j位置，搭配能得到最小的如下值:
// (a[i] + a[j]) ^ 2 + b[i] + b[j]
// 我们把这个最小的值，定义为i的最in值
// 比如 :
// a = {   2,  3,  6,  5,   1 }
// b = { 100, 70, 20, 40, 150 }
//         0   1   2   3    4
// 0位置和2位置搭配，可以得到最in值 : 184
// 1位置和2位置搭配，可以得到最in值 : 171
// 2位置和1位置搭配，可以得到最in值 : 171
// 3位置和1位置搭配，可以得到最in值 : 174
// 4位置和2位置搭配，可以得到最in值 : 219
// 注意 : i位置可以和i位置(自己)搭配，并不是说i和j一定要是不同的位置
// 返回每个位置i的最in值
// 比如上面的例子，最后返回[184, 171, 171, 174, 219]
// 1 <= N <= 10^5
// 1 <= a[i]、b[i] <= 10^9
public class Code_05_PickBestToGetInValue {
}
